#!/usr/bin/env ruby
require 'optparse'
require File.join(File.dirname(__FILE__), '..', 'lib', 'list_and_grep')

USAGE = "#{File.basename(__FILE__)} [OPTIONS...] [KEYWORD]".freeze

MANUAL = File.realpath(
  File.join(File.dirname(__FILE__), '..', 'man', 'man1', 'lsg.1')).freeze

def set_options(options)
  opt_hash = {}
  types = []
  modes = []

  OptionParser.new do |opts|
    opts.banner = ::USAGE
    opts.version = ListAndGrep::VERSION
    opts.release = ListAndGrep::RELEASE

    opts.on("-a", "--all", "Search all files, including hidden files") do
      types << 'a'
      opt_hash[:type] = 'all'
    end
    opts.on("-c", "--[no-]columnize", "Print output in columns") do |v|
      opt_hash[:columnize] = v
    end
    opts.on("-d", "--directories", "Search only directories") do
      modes << 'd'
      opt_hash[:mode] = "directories"
    end
    opts.on("-f", "--files", "Search only files") do
      modes << 'f'
      opt_hash[:mode] = "files"
    end
    opts.on_tail("-h", "--help", "Prints this help") do
      puts opts.help
      exit
    end
    opts.on("-m", "--[no-]match-case",
            "Only return case-sensitive matches") do |v|
      opt_hash[:match] = v
    end
    opts.on("-o", "--hidden", "Search only hidden files") do
      types << 'o'
      opt_hash[:type] = 'hidden'
    end
    opts.on_tail("-u", "--usage", "Prints usage") do
      puts ::USAGE
      exit
    end
    opts.on("-v", "--[no-]verbose", "Verbose") do |v|
      opt_hash[:verbose] = v
    end
    opts.on("-V", "--version", "Print version info") do |v|
      puts opts.ver
      exit
    end
    opts.on('-x', '--executables', "Search only  executable files") do
      modes << 'x'
      opt_hash[:mode] = "executables"
    end
    opts.on('-X', '--non-executables', "Only choose non-executable files") do
      modes << 'X'
      opt_hash[:mode] = 'non-executables'
    end
    opts.on('--man', "Open the manual") do
      exec("man #{MANUAL}")
    end
  end.parse!(options)

  opt_hash[:keyword] = options[0]

  abort("Invalid number of args\n#{USAGE}") unless options.size.between?(1, 2)

  [types, modes].each { |arr| abort(conflict_msg(arr)) if arr.size > 1 }

  opt_hash[:type] ||= "non-hidden"
  opt_hash[:mode] ||= "files and directories"

  opt_hash

rescue OptionParser::InvalidOption, OptionParser::InvalidArgument => e
  abort("#{e}\n#{USAGE}")
end

def conflict_msg(flags)
  "Can't use the following flags together: #{flags.inspect}\n#{usage}"
end

finder = ListAndGrep.new(set_options(ARGV))

finder.return_values

